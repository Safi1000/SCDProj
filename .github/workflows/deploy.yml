name: Build and Deploy to Minikube

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker to use Minikube's environment
      shell: powershell
      run: |
        Write-Host "Configuring Docker to use Minikube's daemon..."
        & minikube -p minikube docker-env | Invoke-Expression

    - name: Check for required files
      shell: powershell
      run: |
        Write-Host "Checking for required files in app/client directory..."
        Get-ChildItem -Path "${{ github.workspace }}/app/client" -Force
        
        # Check for Dockerfile
        if (-not (Test-Path "${{ github.workspace }}/app/client/Dockerfile")) {
          Write-Host "Dockerfile not found, creating it..."
          Set-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "FROM node:18-alpine as build"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "WORKDIR /app"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "COPY package*.json ./"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "RUN npm install --legacy-peer-deps"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "COPY . ."
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "ENV PUBLIC_URL="
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "RUN npm run build"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "RUN ls -la /app/build"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "FROM nginx:alpine"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "COPY --from=build /app/build /usr/share/nginx/html"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "RUN rm /etc/nginx/conf.d/default.conf"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "COPY nginx.conf /etc/nginx/conf.d/default.conf"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value "EXPOSE 80"
          Add-Content -Path "${{ github.workspace }}/app/client/Dockerfile" -Value 'CMD ["nginx", "-g", "daemon off;"]'
          Write-Host "Dockerfile created successfully"
        } else {
          Write-Host "Dockerfile found!"
          Get-Content "${{ github.workspace }}/app/client/Dockerfile"
        }
        
        # Check for nginx.conf
        if (-not (Test-Path "${{ github.workspace }}/app/client/nginx.conf")) {
          Write-Host "nginx.conf not found, creating it..."
          Set-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "server {"
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "    listen 80;"
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value ""
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "    location / {"
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "        root /usr/share/nginx/html;"
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "        index index.html index.htm;"
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value '        try_files $uri $uri/ /index.html;'
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "    }"
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value ""
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "    error_page 500 502 503 504 /50x.html;"
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "    location = /50x.html {"
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "        root /usr/share/nginx/html;"
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "    }"
          Add-Content -Path "${{ github.workspace }}/app/client/nginx.conf" -Value "}"
          Write-Host "nginx.conf created successfully"
        } else {
          Write-Host "nginx.conf found!"
          Get-Content "${{ github.workspace }}/app/client/nginx.conf"
        }

    - name: Build Docker image
      shell: powershell
      run: |
        Write-Host "Current directory contents:"
        Get-ChildItem -Path "${{ github.workspace }}/app/client"
        
        Set-Location -Path "${{ github.workspace }}/app/client"
        Write-Host "Building Docker image from $(Get-Location)"
        docker build -t i222401/ecommerce:latest .

    - name: Login to Docker Hub
      shell: powershell
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker image to Docker Hub
      shell: powershell
      run: |
        docker push i222401/ecommerce:latest

    - name: Deploy to Minikube
      shell: powershell
      run: |
        kubectl apply -f ${{ github.workspace }}/deployment.yaml
        kubectl apply -f ${{ github.workspace }}/service.yaml

    - name: Verify deployment
      shell: powershell
      run: |
        Write-Host "Waiting for deployment to be ready..."
        kubectl rollout status deployment/ecommerce-app
        Write-Host "Service details:"
        kubectl get service ecommerce-service

    - name: Get application URL
      shell: powershell
      run: |
        Write-Host "Application URL:"
        minikube service ecommerce-service --url
